"""
Credit Decision App ‚Äî Version avec √âtape 0, calcul d‚Äôendettement, sliders, et agr√©gation des alertes

Modifs demand√©es :
1) **√âtape 0 (Identification)** : Num√©ro client (optionnel, 8 chiffres), Nom & Pr√©nom (obligatoire), Charg√© de client√®le (obligatoire, d√©faut ¬´ Ahmed Diop ¬ª).
2) **√âtape 1** : on ne saisit plus le taux d‚Äôendettement ; il est **calcul√©** √† partir de : Revenu mensuel, Charges mensuelles, Montant demand√© et Dur√©e (slider). Affichage du taux estim√© (pas d‚Äôaffichage des dates de d√©but/fin).
3) **Dur√©e / Anciennet√©** : utilisation de **sliders** pour Dur√©e du cr√©dit, Anciennet√© du compte, Anciennet√© chez l‚Äôemployeur.
4) **Historique** : n‚Äôest pas affich√© automatiquement ; un bouton "Voir l'historique des simulations" l‚Äôaffiche.
5) **Alertes avant l‚Äô√©tape 3** : si un message **rouge** ou **orange** appara√Æt, **on continue** le processus. Le message emploie le terme **¬´ Alerte ¬ª** (et non ¬´ Refus ¬ª) avant la d√©cision finale.
6) **D√©cision finale** :
   - S‚Äôil y a ‚â•1 **alerte rouge** (sur l‚Äôensemble des √©tapes) ‚áí **Cr√©dit refus√©** avec la **liste des motifs rouges**.
   - Sinon, s‚Äôil y a ‚â•1 **alerte orange** ‚áí **Risque de refus** avec la **liste des motifs orange**.
   - Sinon ‚áí **Cr√©dit accept√©**.

Remarques :
- Pour le calcul de la mensualit√©, on utilise une estimation **simplifi√©e sans int√©r√™ts** : `mensualite = montant / duree_mois`.
  Le taux d‚Äôendettement estim√© = `(charges_mensuelles + mensualite) / revenu_mensuel`.
- La r√®gle CDD (contrat se terminant avant la fin de cr√©dit) s‚Äôapplique en coulisses (dates non affich√©es).
"""

import datetime
import calendar
import pandas as pd
from typing import Dict, Any, Tuple, List
import sys
import os

try:
    import streamlit as st  # type: ignore
    HAS_STREAMLIT = True
except Exception:
    HAS_STREAMLIT = False


# ------------------ Helpers ------------------

def _ensure_date(obj):
    if obj is None:
        return None
    if isinstance(obj, datetime.date):
        return obj
    if isinstance(obj, datetime.datetime):
        return obj.date()
    if isinstance(obj, str):
        for fmt in ("%Y-%m-%d", "%d/%m/%Y", "%d-%m-%Y"):
            try:
                return datetime.datetime.strptime(obj, fmt).date()
            except Exception:
                pass
    return None


def add_months(sourcedate: datetime.date, months: int) -> datetime.date:
    if months <= 0:
        return sourcedate
    month = sourcedate.month - 1 + months
    year = sourcedate.year + month // 12
    month = month % 12 + 1
    day = min(sourcedate.day, calendar.monthrange(year, month)[1])
    return datetime.date(year, month, day)


def calc_endettement_simplifie(revenu_mensuel: float, charges_mensuelles: float, montant_demande: float, duree_mois: int) -> Tuple[float, float]:
    """Retourne (mensualite_estimee, taux_endettement_estime en d√©cimal). Sans int√©r√™ts : mensualite = montant/duree."""
    if duree_mois <= 0 or revenu_mensuel <= 0:
        return 0.0, 0.0
    mensualite = max(0.0, float(montant_demande)) / float(duree_mois)
    taux = (max(0.0, float(charges_mensuelles)) + mensualite) / float(revenu_mensuel)
    return mensualite, taux


# ------------------ R√®gles par √©tape (retournent des listes d‚Äôalertes) ------------------

def eval_step1_alerts(data: Dict[str, Any]) -> Tuple[List[str], List[str]]:
    """Retourne (rouges, oranges) d√©tect√©es √† l‚Äô√©tape 1."""
    rouges, oranges = [], []

    # R√®gle endettement > 1/3 (alerte rouge avant d√©cision finale)
    taux = float(data.get("taux_endettement", 0.0))
    if taux > 1/3:
        rouges.append("Alerte (rouge) : Endettement estim√© sup√©rieur √† 33%")

    # R√®gle CDD se terminant avant fin de cr√©dit (alerte rouge)
    if data.get("type_contrat") == "CDD":
        date_fin_cdd = _ensure_date(data.get("date_fin_cdd"))
        date_fin_credit = _ensure_date(data.get("date_fin_credit"))
        if date_fin_cdd and date_fin_credit and date_fin_cdd < date_fin_credit:
            rouges.append("Alerte (rouge) : CDD se termine avant la fin du cr√©dit demand√©")

    return rouges, oranges


def eval_step2_alerts(data: Dict[str, Any]) -> Tuple[List[str], List[str]]:
    rouges, oranges = [], []

    # Anciennet√© compte < 3 mois
    anc = int(data.get("anciennete_compte", 999))
    if anc < 3:
        rouges.append("Alerte (rouge) : Anciennet√© du compte < 3 mois")

    # Impay√©s actuels
    if bool(data.get("impayes_actuels", False)):
        rouges.append("Alerte (rouge) : Impay√©s actuels dans les 6 derniers mois")

    # Impay√©s anciens
    if bool(data.get("impayes_anciens", False)):
        ch = bool(data.get("changement_employeur", False))
        am = bool(data.get("amelioration_employeur", False))
        taux = float(data.get("taux_endettement", 0.0))
        if ch or am:
            if taux > 0.25:
                oranges.append("Alerte (orange) : Limiter le taux d'endettement √† 25% car impay√©s anciens")
        else:
            rouges.append("Alerte (rouge) : Pas de changement chez l'employeur suite √† des impay√©s anciens")

    return rouges, oranges


def eval_step3_alerts(data: Dict[str, Any]) -> Tuple[List[str], List[str]]:
    rouges, oranges = [], []

    # Anciennet√© employeur < 3 mois
    anc_emp = int(data.get("anciennete_employeur", 999))
    if anc_emp < 3:
        rouges.append("Alerte (rouge) : Anciennet√© chez l‚Äôemployeur < 3 mois")

    statut = data.get("employeur_statut")
    if statut == "Inconnu pour l'instant":
        oranges.append("Alerte (orange) : Se renseigner sur l'√©tat financier de l'employeur pour avis d√©finitif")
    elif isinstance(statut, str) and statut.startswith("üî¥"):
        rouges.append("Alerte (rouge) : Employeur connu avec un √©tat financier risqu√©")
    # üü¢ pas d‚Äôalerte

    return rouges, oranges


# ------------------ D√©cision finale agr√©g√©e ------------------

def final_decision_text(rouges: List[str], oranges: List[str]) -> Tuple[str, str]:
    """Retourne (niveau, texte) o√π niveau ‚àà {red, orange, green}."""
    if rouges:
        motifs = "\n".join([f"‚Ä¢ {m}" for m in rouges])
        return "red", f"Cr√©dit refus√© pour motif(s) suivant(s) :\n{motifs}"
    if oranges:
        motifs = "\n".join([f"‚Ä¢ {m}" for m in oranges])
        return "orange", f"Risque de refus de cr√©dit pour motif(s) suivant(s) :\n{motifs}"
    return "green", "Cr√©dit accept√©"


# ------------------ Streamlit UI ------------------

def run_streamlit_app():
    st.set_page_config(page_title="Simulation Cr√©dit", layout="centered")
    st.title("üìä Simulation Octroi Cr√©dit √† la Consommation")

    # state init
    if "step" not in st.session_state:
        st.session_state.step = 0
    if "form_data" not in st.session_state:
        st.session_state.form_data = {}
    if "historique" not in st.session_state:
        st.session_state.historique = []
    if "alerts_red" not in st.session_state:
        st.session_state.alerts_red = []
    if "alerts_orange" not in st.session_state:
        st.session_state.alerts_orange = []
    if "show_history" not in st.session_state:
        st.session_state.show_history = False

    # ---- √âtape 0 : Identification ----
    if st.session_state.step == 0:
        st.subheader("√âtape 0 ‚Äî Identification")
        num_client = st.text_input("Num√©ro client (8 chiffres, optionnel)")
        nom_prenom = st.text_input("Nom et pr√©nom du client (obligatoire)")
        charge_clientele = st.text_input("Nom et pr√©nom du charg√© de client√®le (obligatoire)", value="Ahmed Diop")

        # validations non bloquantes pour le num√©ro client (optionnel)
        if num_client and (not num_client.isdigit() or len(num_client) != 8):
            st.warning("Le num√©ro client doit contenir exactement 8 chiffres (ou laisser vide).")

        can_continue = bool(nom_prenom.strip()) and bool(charge_clientele.strip())

        col1, col2 = st.columns(2)
        with col1:
            if st.button("Suivant", disabled=not can_continue):
                st.session_state.form_data.update({
                    "numero_client": num_client.strip(),
                    "nom_prenom_client": nom_prenom.strip(),
                    "charge_clientele": charge_clientele.strip(),
                })
                st.session_state.step = 1
        with col2:
            if st.button("Voir l'historique des simulations"):
                st.session_state.show_history = True

    # ---- √âtape 1 : Donn√©es financi√®res & calcul endettement ----
    elif st.session_state.step == 1:
        st.subheader("√âtape 1 ‚Äî Donn√©es financi√®res")
        revenu = st.number_input("Revenu mensuel (FCFA)", min_value=0.0, value=0.0, step=1000.0)
        charges = st.number_input("Charges mensuelles (cr√©dits, loyer, etc.) (FCFA)", min_value=0.0, value=0.0, step=1000.0)
        montant = st.number_input("Montant du cr√©dit demand√© (FCFA)", min_value=0.0, value=0.0, step=1000.0)
        duree_credit_mois = st.slider("Dur√©e du cr√©dit (mois)", min_value=1, max_value=120, value=12)

        mensualite, taux_estime = calc_endettement_simplifie(revenu, charges, montant, duree_credit_mois)
        st.caption(f"Mensualit√© estim√©e (sans int√©r√™ts) : {mensualite:,.0f} FCFA")
        st.caption(f"Taux d'endettement estim√© : {taux_estime*100:.1f}%")

        type_contrat = st.selectbox("Type de contrat", ["CDI", "CDD"])
        date_fin_cdd = None
        if type_contrat == "CDD":
            date_fin_cdd = st.date_input("Date fin CDD (si CDD)", value=(datetime.date.today() + datetime.timedelta(days=180)))

        # calcul dates en coulisses pour la r√®gle CDD
        date_debut_credit = datetime.date.today() + datetime.timedelta(days=15)
        date_fin_credit = add_months(date_debut_credit, int(duree_credit_mois))

        if st.button("Suivant"):
            st.session_state.form_data.update({
                "revenu_mensuel": float(revenu),
                "charges_mensuelles": float(charges),
                "montant_demande": float(montant),
                "duree_credit_mois": int(duree_credit_mois),
                "taux_endettement": float(taux_estime),
                "type_contrat": type_contrat,
                "date_fin_cdd": date_fin_cdd,
                "date_debut_credit": date_debut_credit,
                "date_fin_credit": date_fin_credit,
            })
            r, o = eval_step1_alerts(st.session_state.form_data)
            st.session_state.alerts_red.extend(r)
            st.session_state.alerts_orange.extend(o)
            # Affichage des alertes (on continue de toute fa√ßon)
            for msg in r:
                st.warning(msg)
            for msg in o:
                st.warning(msg)
            st.session_state.step = 2

        if st.button("‚¨Ö Retour"):
            st.session_state.step = 0

        if st.button("Voir l'historique des simulations"):
            st.session_state.show_history = True

    # ---- √âtape 2 : Compte / impay√©s ----
    elif st.session_state.step == 2:
        st.subheader("√âtape 2 ‚Äî Compte & Historique")
        anciennete_compte = st.slider("Anciennet√© du compte (mois)", min_value=0, max_value=240, value=12)
        impayes_actuels = st.checkbox("Impay√©s actuels (6 derniers mois)")
        impayes_anciens = st.checkbox("Impay√©s anciens (il y a plus de 6 mois)")

        changement_employeur = False
        amelioration_employeur = False
        if impayes_anciens:
            st.markdown("**Informations compl√©mentaires (car impay√©s anciens coch√©s)**")
            ch = st.radio("Changement d‚Äôemployeur ?", ["Non", "Oui"], index=0)
            am = st.radio("Am√©lioration de la situation de l‚Äôemployeur ?", ["Non", "Oui"], index=0)
            changement_employeur = (ch == "Oui")
            amelioration_employeur = (am == "Oui")

        if st.button("Suivant"):
            st.session_state.form_data.update({
                "anciennete_compte": int(anciennete_compte),
                "impayes_actuels": bool(impayes_actuels),
                "impayes_anciens": bool(impayes_anciens),
                "changement_employeur": bool(changement_employeur),
                "amelioration_employeur": bool(amelioration_employeur),
            })
            r, o = eval_step2_alerts(st.session_state.form_data)
            st.session_state.alerts_red.extend(r)
            st.session_state.alerts_orange.extend(o)
            for msg in r + o:
                st.warning(msg)
            st.session_state.step = 3

        if st.button("‚¨Ö Retour"):
            st.session_state.step = 1

        if st.button("Voir l'historique des simulations"):
            st.session_state.show_history = True

    # ---- √âtape 3 : Employeur & d√©cision finale ----
    elif st.session_state.step == 3:
        st.subheader("√âtape 3 ‚Äî Informations employeur & d√©cision")
        anciennete_employeur = st.slider("Anciennet√© chez l'employeur (mois)", min_value=0, max_value=480, value=24)
        employeur_statut = st.selectbox(
            "L'employeur est-il connu ?",
            ["üü¢ Connu - pas d'alerte", "üî¥ Connu - Alerte rouge", "Inconnu pour l'instant"],
            index=0,
        )

        if st.button("D√©cision finale"):
            st.session_state.form_data.update({
                "anciennete_employeur": int(anciennete_employeur),
                "employeur_statut": employeur_statut,
            })
            r3, o3 = eval_step3_alerts(st.session_state.form_data)
            st.session_state.alerts_red.extend(r3)
            st.session_state.alerts_orange.extend(o3)

            # D√©cision agr√©g√©e
            level, text = final_decision_text(list(dict.fromkeys(st.session_state.alerts_red)),
                                              list(dict.fromkeys(st.session_state.alerts_orange)))
            if level == "red":
                st.error(text)
            elif level == "orange":
                st.warning(text)
            else:
                st.success(text)

            # Enregistrer l'historique et reset des alertes pour prochaine simulation
            snapshot = {**st.session_state.form_data}
            snapshot.update({
                "alertes_rouges": list(dict.fromkeys(st.session_state.alerts_red)),
                "alertes_oranges": list(dict.fromkeys(st.session_state.alerts_orange)),
                "decision_finale": text,
            })
            st.session_state.historique.append(snapshot)
            st.session_state.alerts_red = []
            st.session_state.alerts_orange = []
            st.session_state.step = 0

        if st.button("‚¨Ö Retour"):
            st.session_state.step = 2

        if st.button("Voir l'historique des simulations"):
            st.session_state.show_history = True

    # ---- Historique (affichage √† la demande) ----
    if st.session_state.show_history and st.session_state.historique:
        df = pd.DataFrame(st.session_state.historique)
        st.subheader("Historique des simulations")
        st.dataframe(df)
        st.download_button("üì• T√©l√©charger l'historique (CSV)", data=df.to_csv(index=False), file_name="historique_credit.csv", mime="text/csv")
        # bouton pour masquer
        if st.button("Masquer l'historique"):
            st.session_state.show_history = False


if __name__ == "__main__":
    if HAS_STREAMLIT:
        run_streamlit_app()
    else:
        print("Streamlit non install√© ‚Äî version UI non ex√©cut√©e.")
